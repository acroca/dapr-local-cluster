apiVersion: v1
kind: ConfigMap
metadata:
  name: keycloak-realm-local
data:
  local-realm.json: |
    {
      "realm": "local",
      "enabled": true,
      "clients": [
        {
          "clientId": "dapr-kafka",
          "secret": "dapr-kafka-secret",
          "enabled": true,
          "protocol": "openid-connect",
          "publicClient": false,
          "serviceAccountsEnabled": true,
          "directAccessGrantsEnabled": false,
          "standardFlowEnabled": false
        },
        {
          "clientId": "kafka-broker",
          "secret": "kafka-broker-secret",
          "enabled": true,
          "protocol": "openid-connect",
          "publicClient": false,
          "serviceAccountsEnabled": true,
          "directAccessGrantsEnabled": false,
          "standardFlowEnabled": false
        }
      ]
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: keycloak
  labels:
    app: keycloak
spec:
  replicas: 1
  selector:
    matchLabels:
      app: keycloak
  template:
    metadata:
      labels:
        app: keycloak
    spec:
      containers:
      - name: keycloak
        image: quay.io/keycloak/keycloak:24.0.5
        imagePullPolicy: IfNotPresent
        args: ["start-dev", "--http-enabled=true", "--hostname-strict=false", "--import-realm"]
        env:
        - name: KEYCLOAK_ADMIN
          value: "admin"
        - name: KEYCLOAK_ADMIN_PASSWORD
          value: "admin"
        ports:
        - containerPort: 8080
          name: http
        volumeMounts:
        - name: realm-import
          mountPath: /opt/keycloak/data/import
      volumes:
      - name: realm-import
        configMap:
          name: keycloak-realm-local
---
apiVersion: v1
kind: Service
metadata:
  name: keycloak
  labels:
    app: keycloak
spec:
  type: ClusterIP
  selector:
    app: keycloak
  ports:
  - name: http
    port: 8080
    targetPort: http


---
apiVersion: v1
kind: Secret
metadata:
  name: kafka-broker-oidc
type: Opaque
stringData:
  client-secret: "kafka-broker-secret"
---
apiVersion: v1
kind: Secret
metadata:
  name: dapr-oidc
type: Opaque
stringData:
  client-secret: "dapr-kafka-secret"


---
apiVersion: batch/v1
kind: Job
metadata:
  name: keycloak-bootstrap
spec:
  template:
    spec:
      restartPolicy: OnFailure
      containers:
      - name: bootstrap
        image: curlimages/curl:8.10.1
        imagePullPolicy: IfNotPresent
        command:
        - /bin/sh
        - -lc
        - |
          set -euo pipefail
          echo "Waiting for Keycloak..."
          until curl -sSf http://keycloak:8080/realms/master/.well-known/openid-configuration >/dev/null; do sleep 2; done
          echo "Keycloak up. Ensuring realm exists (realm imported via Deployment)."
          # Nothing else to do because realm is imported on start


---
apiVersion: kafka.strimzi.io/v1beta2
kind: KafkaNodePool
metadata:
  name: kafka-pool
  labels:
    strimzi.io/cluster: kafka
spec:
  replicas: 1
  roles:
    - controller
    - broker
  storage:
    type: ephemeral
---

apiVersion: kafka.strimzi.io/v1beta2
kind: Kafka
metadata:
  name: kafka
spec:
  kafka:
    version: 4.1.0
    metadataVersion: 4.1-IV1
    listeners:
      - name: plain
        port: 9092
        type: internal
        tls: false
        authentication:
          type: oauth
          clientId: kafka-broker
          clientSecret:
            secretName: kafka-broker-oidc
            key: client-secret
          tokenEndpointUri: http://keycloak.default.svc.cluster.local:8080/realms/local/protocol/openid-connect/token
          validIssuerUri: http://keycloak.default.svc.cluster.local:8080/realms/local
          jwksEndpointUri: http://keycloak.default.svc.cluster.local:8080/realms/local/protocol/openid-connect/certs
          checkAudience: false
          accessTokenIsJwt: true
    config:
      offsets.topic.replication.factor: 1
      transaction.state.log.replication.factor: 1
      transaction.state.log.min.isr: 1
      default.replication.factor: 1
      min.insync.replicas: 1
      inter.broker.protocol.version: "3.7"
      sasl.enabled.mechanisms: OAUTHBEARER
      sasl.mechanism.inter.broker.protocol: OAUTHBEARER
  entityOperator:
    topicOperator: {}
    userOperator: {}



